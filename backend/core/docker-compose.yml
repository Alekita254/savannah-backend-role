# version: '3.8'

# services:
#   web:
#     build: .
#     command: > 
#       sh -c "until PGPASSWORD=$DB_PASSWORD psql -h db -U $DB_USER -d $DB_NAME -c 'select 1' >/dev/null 2>&1; do
#               echo 'Waiting for database...';
#               sleep 1;
#             done &&
#             python manage.py migrate &&
#             python manage.py collectstatic --noinput &&
#             gunicorn --bind 0.0.0.0:5000 core.wsgi:application"
#     volumes:
#       - .:/app
#     ports:
#       - "5000:5000"
#     env_file:
#       - .env
#     depends_on:
#       db:
#         condition: service_healthy
#       redis:
#         condition: service_started

#   db:
#     image: postgres:13
#     volumes:
#       - postgres_data:/var/lib/postgresql/data/
#     environment:
#       POSTGRES_DB: ${DB_NAME}
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
#       interval: 5s
#       timeout: 5s
#       retries: 10
#     env_file:
#       - .env 

#   redis:
#     image: redis:6
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

# volumes:
#   postgres_data:
version: '3.8'

services:
  web:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py createsuperuser --noinput || true &&
             gunicorn --bind 0.0.0.0:5000 core.wsgi:application"
    volumes:
      - .:/app
    ports:
      - "5000:5000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: savannahtest
      POSTGRES_USER: savannahuser
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U savannahuser -d savannahtest -h db"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:6
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
